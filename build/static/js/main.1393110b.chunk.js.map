{"version":3,"sources":["components/Toolbar.js","components/Label.js","components/Message.js","components/MessageList.js","components/NewMessage.js","App.js","serviceWorker.js","index.js"],"names":["Toolbar","_ref","messageList","composeToggle","readMarker","unreadMarker","selectAll","unreadList","filter","message","undefined","read","react_default","a","createElement","className","length","onClick","disabled","value","Label","messageLabels","Message","dataPatcher","messageSelector","concat","selected","type","onChange","id","checked","starred","labels","map","label","i","components_Label","key","subject","MessageList","components_Message","NewMessage","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","subjectUpdater","event","console","log","state","subjectValue","setState","target","bodyUpdater","bodyValue","dataPasser","dataPoster","htmlFor","placeholder","name","Component","App","allSelected","compose","dataFetcher","fetch","then","response","json","data","messageID","command","method","body","JSON","stringify","messageIds","headers","Content-Type","res","catch","error","newMessage","newMessages","components_Toolbar","components_NewMessage","components_MessageList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oRA8CeA,SA5CC,SAAAC,GAAyE,IAAtEC,EAAsED,EAAtEC,YAAaC,EAAyDF,EAAzDE,cAAeC,EAA0CH,EAA1CG,WAAYC,EAA8BJ,EAA9BI,aAAcC,EAAgBL,EAAhBK,UAEnEC,EAAcL,EAAYM,OAAO,SAAAC,GAAO,YAAqBC,IAAjBD,EAAQE,OAAuC,IAAjBF,EAAQE,OAEpF,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAeR,EAAWS,QACnB,IAAtBT,EAAWS,OAAe,iBAAmB,mBAEhDJ,EAAAC,EAAAC,cAAA,KAAGG,QAASd,EAAeY,UAAU,kBACnCH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAEfH,EAAAC,EAAAC,cAAA,UAAQG,QAASX,EAAWS,UAAU,mBACpCH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBAEfH,EAAAC,EAAAC,cAAA,UAAQG,QAASb,EAAYW,UAAU,mBAAvC,gBAGAH,EAAAC,EAAAC,cAAA,UAAQG,QAASZ,EAAcU,UAAU,mBAAzC,kBAGAH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,4BAA4BG,SAAS,YACrDN,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,UAAQK,MAAM,OAAd,OACAP,EAAAC,EAAAC,cAAA,UAAQK,MAAM,YAAd,YACAP,EAAAC,EAAAC,cAAA,UAAQK,MAAM,WAAd,YAEFP,EAAAC,EAAAC,cAAA,UAAQC,UAAU,4BAA4BG,SAAS,YACrDN,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,UAAQK,MAAM,OAAd,OACAP,EAAAC,EAAAC,cAAA,UAAQK,MAAM,YAAd,YACAP,EAAAC,EAAAC,cAAA,UAAQK,MAAM,WAAd,YAEFP,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBG,SAAS,YAC3CN,EAAAC,EAAAC,cAAA,KAAGC,UAAU,uBC5BRK,EARD,SAAAnB,GAAuB,IAApBoB,EAAoBpB,EAApBoB,cAEf,OACIT,EAAAC,EAAAC,cAAA,QAAMC,UAAU,uBAAhB,IAAwCM,EAAxC,MC0BSC,EA5BC,SAAArB,GAA+C,IAA5CQ,EAA4CR,EAA5CQ,QAASc,EAAmCtB,EAAnCsB,YAAaC,EAAsBvB,EAAtBuB,gBAMvC,OACEZ,EAAAC,EAAAC,cAAA,OAAKC,UAAS,eAAAU,YAAkCf,IAAjBD,EAAQE,MAAsBF,EAAQE,KAAO,OAAS,SAAvE,KAAAc,OAAmFhB,EAAQiB,SAAW,WAAa,GAAnH,MACZd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,SAAOa,KAAK,WAAWC,SAAU,kBAAMJ,EAAgBf,EAAQoB,KAAKC,UAAUrB,EAAQiB,YAExFd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,KAAGG,QAZI,WACfM,EAAYd,EAAQoB,GAAI,SAWQd,UAAS,WAAAU,OAAahB,EAAQsB,QAAU,UAAY,kBAIlFnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZN,EAAQuB,OAAOC,IAAI,SAACC,EAAOC,GAAO,OAAQvB,EAAAC,EAAAC,cAACsB,EAAD,CAAOC,IAAKF,EAAGd,cAAea,MACzEtB,EAAAC,EAAAC,cAAA,SACGL,EAAQ6B,YCRJC,EAbK,SAAAtC,GAAmD,IAAhDC,EAAgDD,EAAhDC,YAAaqB,EAAmCtB,EAAnCsB,YAAaC,EAAsBvB,EAAtBuB,gBAE/C,OACEZ,EAAAC,EAAAC,cAAA,WACGZ,EAAY+B,IAAI,SAAAxB,GAAO,OAAIG,EAAAC,EAAAC,cAAC0B,EAAD,CAAUhB,gBAAiBA,EACjBD,YAAaA,EACbc,IAAK5B,EAAQoB,GACbpB,QAASA,QC+CtCgC,cArDb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAORQ,eAAiB,SAACC,GAChBC,QAAQC,IAAIV,EAAKW,MAAMC,cACvBZ,EAAKa,SAAS,CAACD,aAAcJ,EAAMM,OAAOtC,SAV1BwB,EAalBe,YAAc,SAACP,GACbC,QAAQC,IAAIV,EAAKW,MAAMK,WACvBhB,EAAKa,SAAS,CAACG,UAAWR,EAAMM,OAAOtC,SAfvBwB,EAkBlBiB,WAAa,WACXjB,EAAKD,MAAMmB,WAAWlB,EAAKW,QAjB3BX,EAAKW,MAAM,CACTC,aAAc,GACdI,UAAW,IAJGhB,wEAuBhB,OACE/B,EAAAC,EAAAC,cAAA,QAAMC,UAAU,wBACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACfH,EAAAC,EAAAC,cAAA,+BAGFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAOgD,QAAQ,UAAU/C,UAAU,0BAAnC,WACEH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,SAAOa,KAAK,OAAOC,SAAUkB,KAAKI,eAAgB/B,MAAO2B,KAAKQ,MAAMC,aAAcxC,UAAU,eAAec,GAAG,UAAUkC,YAAY,kBAAkBC,KAAK,cAGjKpD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAOgD,QAAQ,OAAO/C,UAAU,0BAAhC,QACEH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,YAAUkD,KAAK,OAAOpC,SAAUkB,KAAKY,YAAavC,MAAO2B,KAAKQ,MAAMK,UAAW9B,GAAG,OAAOd,UAAU,mBAGzGH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACbH,EAAAC,EAAAC,cAAA,SAAOG,QAAS6B,KAAKc,WAAYzC,MAAM,OAAOJ,UAAU,8BA9C3CkD,aCmIVC,6MA7HbZ,MAAO,CACLpD,YAAa,GACbiE,aAAa,EACbC,SAAS,KAOXC,YAAc,WACZC,MAAM,sCACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAI/B,EAAKa,SAAS,CAAEtD,YAAawE,MAC1CH,KAAK,kBAAM5B,EAAKW,MAAMpD,YAAY+B,IAAI,SAAAxB,GACrC,YAAyBC,IAArBD,EAAQiB,SACHjB,GAGPA,EAAQiB,UAAW,EACZjB,UAMfc,YAAc,SAACoD,EAAWC,EAASjE,GACjC2D,MAAM,qCAAsC,CAC1CO,OAAQ,QACRC,KAAMC,KAAKC,UAAU,CACnBC,WAAc,CAACN,GACfC,QAAWA,EACXjE,KAASA,IAEXuE,QAAQ,CACNC,eAAgB,sBAEjBZ,KAAK,SAAAa,GAAG,OAAIA,EAAIX,SAClBF,KAAK5B,EAAK0B,aACVgB,MAAM,SAAAC,GAAK,OAAIlC,QAAQkC,MAAM,SAAUA,QAG1CzB,WAAa,SAAC0B,GACZjB,MAAM,qCAAsC,CAC1CO,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnB1C,QAAWiD,EAAWhC,aACtB5C,MAAQ,EACRoB,SAAW,EACXC,OAAU,GACV8C,KAAQS,EAAW5B,UACnB9B,GAAMc,EAAKW,MAAMpD,YAAYc,OAAQ,IAEvCkE,QAAQ,CACNC,eAAgB,sBAEjBZ,KAAK,SAAAa,GAAG,OAAIA,EAAIX,SAClBF,KAAK,SAAAC,GAAQ,OAAIpB,QAAQC,IAAI,WAAYmB,KACzCD,KAAK5B,EAAKa,SAAS,CAACY,SAAS,KAC7BG,KAAK5B,EAAK0B,aACVgB,MAAM,SAAAC,GAAK,OAAIlC,QAAQkC,MAAM,SAAUA,QAG1C9D,gBAAkB,SAACK,GACjB,IAAI2D,EAAc7C,EAAKW,MAAMpD,YAAY+B,IAAI,SAAAxB,GAC3C,OAAIA,EAAQoB,KAAOA,GACjBpB,EAAQiB,UAAYjB,EAAQiB,SACrBjB,GAGAA,IAGXkC,EAAKa,SAAS,CAAEtD,YAAasF,OAG/BpF,WAAa,WACXuC,EAAKW,MAAMpD,YAAY+B,IAAI,SAAAxB,GACtBA,EAAQiB,UACTiB,EAAKpB,YAAYd,EAAQoB,GAAI,QAAQ,QAK3CxB,aAAe,WACbsC,EAAKW,MAAMpD,YAAY+B,IAAI,SAAAxB,GACtBA,EAAQiB,UACTiB,EAAKpB,YAAYd,EAAQoB,GAAI,QAAQ,QAK3CvB,UAAY,WACNqC,EAAKW,MAAMa,aACbxB,EAAKW,MAAMpD,YAAY+B,IAAI,SAAAxB,GAAaA,EAAQiB,UAAW,IAC3DiB,EAAKa,SAAS,CAAEW,aAAa,MAG7BxB,EAAKW,MAAMpD,YAAY+B,IAAI,SAAAxB,GAAaA,EAAQiB,UAAW,IAC3DiB,EAAKa,SAAS,CAAEW,aAAa,QAIjChE,cAAgB,WACdwC,EAAKa,SAAS,CAAEY,SAAUzB,EAAKW,MAAMc,sMAjGrCtB,KAAKuB,iJAqGL,OACEzD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC2E,EAAD,CAAUnF,UAAWwC,KAAKxC,UAChBD,aAAcyC,KAAKzC,aACnBD,WAAY0C,KAAK1C,WACjBD,cAAe2C,KAAK3C,cACpBD,YAAa4C,KAAKQ,MAAMpD,cACjC4C,KAAKQ,MAAMc,QAAUxD,EAAAC,EAAAC,cAAC4E,EAAD,CAAY7B,WAAYf,KAAKe,aAAiB,GACpEjD,EAAAC,EAAAC,cAAC6E,EAAD,CAAcnE,gBAAiBsB,KAAKtB,gBACtBD,YAAauB,KAAKvB,YAClBrB,YAAa4C,KAAKQ,MAAMpD,sBAxH5B+D,aCME2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,6ECTNC,IAASC,OAAOtF,EAAAC,EAAAC,cAACqF,EAAD,MAASC,SAASC,eAAe,SDoH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,KAAK,SAAAkC,GACjCA,EAAaC","file":"static/js/main.1393110b.chunk.js","sourcesContent":["import React from 'react'\n\nconst Toolbar = ({ messageList, composeToggle, readMarker, unreadMarker, selectAll }) => {\n\n  let unreadList = (messageList.filter(message => message.read !== undefined && message.read === false))\n\n    return (\n      <div className='row toolbar'>\n      <div className='col-md-12'>\n        <p className='pull-right'>\n          <span className='badge badge'>{unreadList.length}</span>\n          {unreadList.length === 1 ? 'unread message' : 'unread messages'}\n        </p>\n        <a onClick={composeToggle} className='btn btn-danger'>\n          <i className='fa fa-plus'></i>\n        </a>\n        <button onClick={selectAll} className='btn btn-default'>\n          <i className='fa fa-square-o'></i>\n        </button>\n        <button onClick={readMarker} className='btn btn-default'>\n          Mark As Read\n        </button>\n        <button onClick={unreadMarker} className='btn btn-default'>\n          Mark As Unread\n        </button>\n        <select className='form-control label-select' disabled='disabled'>\n          <option>Apply label</option>\n          <option value='dev'>dev</option>\n          <option value='personal'>personal</option>\n          <option value='gschool'>gschool</option>\n        </select>\n        <select className='form-control label-select' disabled='disabled'>\n          <option>Remove label</option>\n          <option value='dev'>dev</option>\n          <option value='personal'>personal</option>\n          <option value='gschool'>gschool</option>\n        </select>\n        <button className='btn btn-default' disabled='disabled'>\n          <i className='fa fa-trash-o'></i>\n        </button>\n      </div>\n    </div>\n  )\n  \n} \n\nexport default Toolbar","import React from 'react'\n\nconst Label = ({ messageLabels }) => {\n\n  return (\n      <span className='label label-warning'> {messageLabels} </span>\n  )\n  \n} \n\nexport default Label","import React from 'react'\nimport Label from './Label'\n\nconst Message = ({ message, dataPatcher, messageSelector }) => {\n\n  let starSetter = () => {\n    dataPatcher(message.id, 'star')   \n  }\n\n  return (\n    <div className={`row message ${message.read === undefined || message.read ? 'read' : 'unread'} ${message.selected ? 'selected' : ''} `}>\n      <div className='col-xs-1'>\n        <div className='row'>\n          <div className='col-xs-2'>\n            <input type='checkbox' onChange={() => messageSelector(message.id)} checked={ message.selected ? true : false} />\n          </div>\n          <div className='col-xs-2'>\n            <i onClick={starSetter} className={`star fa ${message.starred ? 'fa-star' : 'fa-star-o'}`}></i>\n          </div>\n        </div>\n      </div>\n      <div className='col-xs-11'>\n        {message.labels.map((label, i) => {return (<Label key={i} messageLabels={label} />)})}\n        <a>\n          {message.subject}\n        </a>\n      </div>\n    </div>\n  )\n}\n\nexport default Message","import React from 'react'\nimport Message from './Message'\n\nconst MessageList = ({ messageList, dataPatcher, messageSelector }) => {\n\n  return (\n    <div>\n      {messageList.map(message => <Message  messageSelector={messageSelector} \n                                            dataPatcher={dataPatcher} \n                                            key={message.id} \n                                            message={message} />)}\n    </div>\n  )\n  \n}\n\nexport default MessageList","import React, { Component } from 'react'\n\nclass NewMessage extends Component {\n\n  constructor(props){\n    super(props)\n    this.state={\n      subjectValue: '',\n      bodyValue: ''\n    }\n  }\n\n  subjectUpdater = (event) => {\n    console.log(this.state.subjectValue)\n    this.setState({subjectValue: event.target.value})\n  }\n\n  bodyUpdater = (event) => {\n    console.log(this.state.bodyValue)\n    this.setState({bodyValue: event.target.value})\n  }\n\n  dataPasser = () => {\n    this.props.dataPoster(this.state)\n  }\n\n  render() {\n    return (\n      <form className='form-horizontal well'>\n        <div className='form-group'>\n          <div className='col-sm-8 col-sm-offset-2'>\n          <h4>Compose Message</h4>\n          </div>\n        </div>\n        <div className='form-group'>\n          <label htmlFor='subject' className='col-sm-2 control-label'>Subject</label>\n            <div className='col-sm-8'>\n              <input type='text' onChange={this.subjectUpdater} value={this.state.subjectValue} className='form-control' id='subject' placeholder='Enter a subject' name='subject' />\n            </div>\n          </div>\n        <div className='form-group'>\n          <label htmlFor='body' className='col-sm-2 control-label'>Body</label>\n            <div className='col-sm-8'>\n              <textarea name='body' onChange={this.bodyUpdater} value={this.state.bodyValue} id='body' className='form-control'></textarea>\n            </div>\n          </div>\n        <div className='form-group'>\n          <div className='col-sm-8 col-sm-offset-2'>\n            <input onClick={this.dataPasser} value='Send' className='btn btn-primary' />\n          </div>\n        </div>\n      </form>\n    )\n  }\n\n}\n\nexport default NewMessage","import React, { Component } from 'react'\nimport './App.css'\nimport Toolbar from './components/Toolbar'\nimport MessageList from './components/MessageList'\nimport NewMessage from './components/NewMessage'\n\nclass App extends Component {\n\n  state ={\n    messageList: [],\n    allSelected: false,\n    compose: false\n  }\n\n  async componentDidMount() {\n    this.dataFetcher()\n  }\n\n  dataFetcher = () => {\n    fetch('http://localhost:8082/api/messages')\n      .then(response => response.json())\n      .then(data => this.setState({ messageList: data }))\n      .then(() => this.state.messageList.map(message => {\n        if (message.selected !== undefined) {          \n          return message\n        }\n        else {\n          message.selected = false \n          return message\n        }\n      })\n    )\n  }\n\n  dataPatcher = (messageID, command, read) => {  \n    fetch('http://localhost:8082/api/messages', {\n      method: 'PATCH',\n      body: JSON.stringify({\n        'messageIds': [messageID],\n        'command': command,\n        'read' : read\n      }),\n      headers:{\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json())\n    .then(this.dataFetcher)\n    .catch(error => console.error('Error:', error))\n  }\n\n  dataPoster = (newMessage) => {\n    fetch('http://localhost:8082/api/messages', {\n      method: 'POST',\n      body: JSON.stringify({\n        'subject': newMessage.subjectValue,\n        'read': false,\n        'starred': false,\n        'labels': [],\n        'body': newMessage.bodyValue,\n        'id': this.state.messageList.length +1\n      }),\n      headers:{\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json())\n    .then(response => console.log('Success:', response))\n    .then(this.setState({compose: false}))\n    .then(this.dataFetcher)\n    .catch(error => console.error('Error:', error))\n  }\n\n  messageSelector = (id) => {\n    let newMessages = this.state.messageList.map(message => {\n      if (message.id === id) {\n        message.selected = !message.selected\n        return message\n      }\n      else{\n        return message\n      }\n    })\n    this.setState({ messageList: newMessages })\n  }\n\n  readMarker = () => {\n    this.state.messageList.map(message => {\n      if(message.selected) {\n        this.dataPatcher(message.id, 'read', true)\n      }\n    })\n  }\n\n  unreadMarker = () => {\n    this.state.messageList.map(message => {\n      if(message.selected) {\n        this.dataPatcher(message.id, 'read', false)\n      }\n    })\n  }\n\n  selectAll = () => {\n    if (this.state.allSelected) {\n      this.state.messageList.map(message => { message.selected = false })\n      this.setState({ allSelected: false })\n    }\n    else {\n      this.state.messageList.map(message => { message.selected = true })\n      this.setState({ allSelected: true })\n    }\n  }\n\n  composeToggle = () => {\n    this.setState({ compose: !this.state.compose })\n  }\n\n  render() {\n    return (\n      <div className='col-md-12'>\n        <Toolbar  selectAll={this.selectAll} \n                  unreadMarker={this.unreadMarker} \n                  readMarker={this.readMarker} \n                  composeToggle={this.composeToggle} \n                  messageList={this.state.messageList} />\n        {this.state.compose ? <NewMessage dataPoster={this.dataPoster} /> : ''}\n        <MessageList  messageSelector={this.messageSelector} \n                      dataPatcher={this.dataPatcher} \n                      messageList={this.state.messageList} />\n      </div>\n    )\n  }\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'bootstrap/dist/css/bootstrap.css'\nimport 'bootstrap/dist/css/bootstrap-theme.css'\nimport 'font-awesome/css/font-awesome.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()"],"sourceRoot":""}